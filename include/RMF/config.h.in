/*
 * \file RMF/RMF_config.h
 * \brief Provide macros to mark functions and classes as exported
 *        from a DLL/.so, and to set up namespaces
 *
 * When building the module, RMF_EXPORTS should be defined, and when
 * using the module externally, it should not be. Classes and functions
 * declared in the module's headers should then be marked with
 * RMFEXPORT if they are intended to be part of the API and
 * they are not defined entirely in a header.
 *
 * The Windows build environment requires applications to mark exports in
 * this way; we use the same markings to set the visibility of ELF symbols
 * if we have compiler support.
 *
 * All code in this module should live in the RMF namespace.
 * This is simply achieved by wrapping things with the
 * RMF_BEGIN_NAMESPACE and RMF_END_NAMESPACE macros.
 * There are similar macros for module code that is designed to be for
 * internal use only.
 *
 * This header is auto-generated by scons_tools/module/_config_h.py;
 * it should not be edited manually.
 *
 * Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#ifndef RMF_CONFIG_H
#define RMF_CONFIG_H

#include <string>


#ifdef _MSC_VER

#ifdef RMF_EXPORTS
#define RMFEXPORT __declspec(dllexport)
#else // EXPORTS
#define RMFEXPORT __declspec(dllimport)
#endif // EXPORTS

#else // _MSC_VER

#define RMFEXPORT

#endif // _MSC_VER


#cmakedefine RMF_USE_GOOGLEPERFTOOLS

#cmakedefine RMF_USE_PROTOBUF

#cmakedefine RMF_USE_HDF5

#cmakedefine RMF_USE_GPERFTOOLS

#define RMF_VERSION_MAJOR @RMF_VERSION_MAJOR@

#define RMF_VERSION_MINOR @RMF_VERSION_MINOR@



#endif  /* RMF_CONFIG_H */
